{"title":"测试代码2","uid":"048892b59aabada35c298130c9b4c7b4","slug":"ntest - 副本","date":"2024-03-11T11:02:45.000Z","updated":"2024-03-11T11:05:30.739Z","comments":true,"path":"api/articles/ntest - 副本.json","keywords":null,"cover":[],"content":"<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Title</title>\n</head>\n<body>\n<!doctype html>\n<html>\n<head>\n    <meta charset=\"utf-8\">\n    <title>爱心</title><!-- 这是网页标题 -->\n    <style>\n        body{\n            overflow: hidden;\n            margin: 0;\n        }\n        h1{\n            position: fixed;\n            top: 30%;\n            left: 0;\n            width: 100%;\n            text-align: center;\n            transform:translateY(-50%);\n            font-family: 'Love Ya Like A Sister', cursive;\n            font-size: 60px;\n            color: #c70012;\n            padding: 0 20px;\n        }\n        h1 span{\n            position: fixed;\n            left: 0;\n            width: 100%;\n            text-align: center;\n            margin-top:30px;\n            font-size:40px;\n        }\n    </style>\n</head>\n<body>\n<h1 id=\"h1\"></h1>\n<canvas></canvas> <!--canvas 画布-->\n<script>\n    var canvas = document.querySelector(\"canvas\"),\n        ctx = canvas.getContext(\"2d\");\n    var ww,wh;\n    function onResize(){\n        ww = canvas.width = window.innerWidth;\n        wh = canvas.height = window.innerHeight;\n    }\n    ctx.strokeStyle = \"red\";\n    ctx.shadowBlur = 25;\n    ctx.shadowColor = \"hsla(0, 100%, 60%,0.5)\";\n    var precision = 100;\n    var hearts = [];\n    var mouseMoved = false;\n    function onMove(e){\n        mouseMoved = true;\n        if(e.type === \"touchmove\"){\n            hearts.push(new Heart(e.touches[0].clientX, e.touches[0].clientY));\n            hearts.push(new Heart(e.touches[0].clientX, e.touches[0].clientY));\n        }\n        else{\n            hearts.push(new Heart(e.clientX, e.clientY));\n            hearts.push(new Heart(e.clientX, e.clientY));\n        }\n    }\n    var Heart = function(x,y){\n        this.x = x || Math.random()*ww;\n        this.y = y || Math.random()*wh;\n        this.size = Math.random()*2 + 1;\n        this.shadowBlur = Math.random() * 10;\n        this.speedX = (Math.random()+0.2-0.6) * 8;\n        this.speedY = (Math.random()+0.2-0.6) * 8;\n        this.speedSize = Math.random()*0.05 + 0.01;\n        this.opacity = 1;\n        this.vertices = [];\n        for (var i = 0; i < precision; i++) {\n            var step = (i / precision - 0.5) * (Math.PI * 2);\n            var vector = {\n                x : (15 * Math.pow(Math.sin(step), 3)),\n                y : -(13 * Math.cos(step) - 5 * Math.cos(2 * step) - 2 * Math.cos(3 * step) - Math.cos(4 * step))\n            }\n            this.vertices.push(vector);\n        }\n    }\n    Heart.prototype.draw = function(){\n        this.size -= this.speedSize;\n        this.x += this.speedX;\n        this.y += this.speedY;\n        ctx.save();\n        ctx.translate(-1000,this.y);\n        ctx.scale(this.size, this.size);\n        ctx.beginPath();\n        for (var i = 0; i < precision; i++) {\n            var vector = this.vertices[i];\n            ctx.lineTo(vector.x, vector.y);\n        }\n        ctx.globalAlpha = this.size;\n        ctx.shadowBlur = Math.round((3 - this.size) * 10);\n        ctx.shadowColor = \"hsla(0, 100%, 60%,0.5)\";\n        ctx.shadowOffsetX = this.x + 1000;\n        ctx.globalCompositeOperation = \"screen\"\n        ctx.closePath();\n        ctx.fill()\n        ctx.restore();\n    };\n    function render(a){\n        requestAnimationFrame(render);\n        hearts.push(new Heart())\n        ctx.clearRect(0,0,ww,wh);\n        for (var i = 0; i < hearts.length; i++) {\n            hearts[i].draw();\n            if(hearts[i].size <= 0){\n                hearts.splice(i,1);\n                i--;\n            }\n        }\n    }\n    onResize();\n    window.addEventListener(\"mousemove\", onMove);\n    window.addEventListener(\"touchmove\", onMove);\n    window.addEventListener(\"resize\", onResize);\n    requestAnimationFrame(render);\n    window.οnlοad=function starttime(){\n        time(h1,'2022,2,1');     // 2021年春节时间\n        ptimer = setTimeout(starttime,1000); // 添加计时器\n    }\n\n<p></script></p>\n</body>\n</html>\n<!DOCTYPE html>\n<html>\n<head>\n    <title></title>\n    <script src=\"js/jquery.min.js\"></script>\n</head>\n<style>\n    * {\n        padding: 0;\n        margin: 0;\n    }\n    html,\n    body {\n        height: 100%;\n        padding: 0;\n        margin: 0;\n        background: #000;\n    }\n\n<div class=\"language-txt\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">txt</span><pre class=\"shiki material-theme-palenight\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #babed8\">.aa &#123;</span></span>\n<span class=\"line\"><span style=\"color: #babed8\">    position: fixed;</span></span>\n<span class=\"line\"><span style=\"color: #babed8\">    left: 50%;</span></span>\n<span class=\"line\"><span style=\"color: #babed8\">    bottom: 10px;</span></span>\n<span class=\"line\"><span style=\"color: #babed8\">    color: #ccc;</span></span>\n<span class=\"line\"><span style=\"color: #babed8\">&#125;</span></span>\n<span class=\"line\"><span style=\"color: #babed8\"></span></span>\n<span class=\"line\"><span style=\"color: #babed8\">.container &#123;</span></span>\n<span class=\"line\"><span style=\"color: #babed8\">    width: 100%;</span></span>\n<span class=\"line\"><span style=\"color: #babed8\">    height: 100%;</span></span>\n<span class=\"line\"><span style=\"color: #babed8\">&#125;</span></span>\n<span class=\"line\"><span style=\"color: #babed8\">canvas &#123;</span></span>\n<span class=\"line\"><span style=\"color: #babed8\">    z-index: 99;</span></span>\n<span class=\"line\"><span style=\"color: #babed8\">    position: absolute;</span></span>\n<span class=\"line\"><span style=\"color: #babed8\">    width: 100%;</span></span>\n<span class=\"line\"><span style=\"color: #babed8\">    height: 100%;</span></span>\n<span class=\"line\"><span style=\"color: #babed8\">&#125;</span></span></code></pre></div><p></style></p>\n<body>\n<!-- 樱花 -->\n<div id=\"jsi-cherry-container\" class=\"container\">\n    <audio autoplay=\"autopaly\">\n        <source src=\"renxi.mp3\" type=\"audio/mp3\" />\n    </audio>\n    <img class=\"img\" src=\"./123.png\" alt=\"\" />\n    <!-- 爱心 -->\n    <canvas id=\"pinkboard\" class=\"container\"> </canvas>\n</div>\n\n</body>\n</html>\n<script>\n    /*\n     * Settings\n     */\n    var settings = {\n        particles: {\n            length: 500, // maximum amount of particles\n            duration: 2, // particle duration in sec\n            velocity: 100, // particle velocity in pixels/sec\n            effect: -0.75, // play with this for a nice effect\n            size: 30, // particle size in pixels\n        },\n    };\n\n<div class=\"language-txt\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">txt</span><pre class=\"shiki material-theme-palenight\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #babed8\">(function () &#123;</span></span>\n<span class=\"line\"><span style=\"color: #babed8\">    var b = 0;</span></span>\n<span class=\"line\"><span style=\"color: #babed8\">    var c = [&quot;ms&quot;, &quot;moz&quot;, &quot;webkit&quot;, &quot;o&quot;];</span></span>\n<span class=\"line\"><span style=\"color: #babed8\">    for (var a = 0; a &lt; c.length &amp;&amp; !window.requestAnimationFrame; ++a) &#123;</span></span>\n<span class=\"line\"><span style=\"color: #babed8\">        window.requestAnimationFrame = window[c[a] + &quot;RequestAnimationFrame&quot;];</span></span>\n<span class=\"line\"><span style=\"color: #babed8\">        window.cancelAnimationFrame =</span></span>\n<span class=\"line\"><span style=\"color: #babed8\">            window[c[a] + &quot;CancelAnimationFrame&quot;] ||</span></span>\n<span class=\"line\"><span style=\"color: #babed8\">            window[c[a] + &quot;CancelRequestAnimationFrame&quot;];</span></span>\n<span class=\"line\"><span style=\"color: #babed8\">    &#125;</span></span>\n<span class=\"line\"><span style=\"color: #babed8\">    if (!window.requestAnimationFrame) &#123;</span></span>\n<span class=\"line\"><span style=\"color: #babed8\">        window.requestAnimationFrame = function (h, e) &#123;</span></span>\n<span class=\"line\"><span style=\"color: #babed8\">            var d = new Date().getTime();</span></span>\n<span class=\"line\"><span style=\"color: #babed8\">            var f = Math.max(0, 16 - (d - b));</span></span>\n<span class=\"line\"><span style=\"color: #babed8\">            var g = window.setTimeout(function () &#123;</span></span>\n<span class=\"line\"><span style=\"color: #babed8\">                h(d + f);</span></span>\n<span class=\"line\"><span style=\"color: #babed8\">            &#125;, f);</span></span>\n<span class=\"line\"><span style=\"color: #babed8\">            b = d + f;</span></span>\n<span class=\"line\"><span style=\"color: #babed8\">            return g;</span></span>\n<span class=\"line\"><span style=\"color: #babed8\">        &#125;;</span></span>\n<span class=\"line\"><span style=\"color: #babed8\">    &#125;</span></span>\n<span class=\"line\"><span style=\"color: #babed8\">    if (!window.cancelAnimationFrame) &#123;</span></span>\n<span class=\"line\"><span style=\"color: #babed8\">        window.cancelAnimationFrame = function (d) &#123;</span></span>\n<span class=\"line\"><span style=\"color: #babed8\">            clearTimeout(d);</span></span>\n<span class=\"line\"><span style=\"color: #babed8\">        &#125;;</span></span>\n<span class=\"line\"><span style=\"color: #babed8\">    &#125;</span></span>\n<span class=\"line\"><span style=\"color: #babed8\">&#125;)();</span></span>\n<span class=\"line\"><span style=\"color: #babed8\"></span></span>\n<span class=\"line\"><span style=\"color: #babed8\">/*</span></span>\n<span class=\"line\"><span style=\"color: #babed8\"> *Point class</span></span>\n<span class=\"line\"><span style=\"color: #babed8\"> */</span></span>\n<span class=\"line\"><span style=\"color: #babed8\">var Point = (function () &#123;</span></span>\n<span class=\"line\"><span style=\"color: #babed8\">    function Point(x, y) &#123;</span></span>\n<span class=\"line\"><span style=\"color: #babed8\">        this.x = typeof x !== &quot;undefined&quot; ? x : 0;</span></span>\n<span class=\"line\"><span style=\"color: #babed8\">        this.y = typeof y !== &quot;undefined&quot; ? y : 0;</span></span>\n<span class=\"line\"><span style=\"color: #babed8\">    &#125;</span></span>\n<span class=\"line\"><span style=\"color: #babed8\">    Point.prototype.clone = function () &#123;</span></span>\n<span class=\"line\"><span style=\"color: #babed8\">        return new Point(this.x, this.y);</span></span>\n<span class=\"line\"><span style=\"color: #babed8\">    &#125;;</span></span>\n<span class=\"line\"><span style=\"color: #babed8\">    Point.prototype.length = function (length) &#123;</span></span>\n<span class=\"line\"><span style=\"color: #babed8\">        if (typeof length == &quot;undefined&quot;)</span></span>\n<span class=\"line\"><span style=\"color: #babed8\">            return Math.sqrt(this.x * this.x + this.y * this.y);</span></span>\n<span class=\"line\"><span style=\"color: #babed8\">        this.normalize();</span></span>\n<span class=\"line\"><span style=\"color: #babed8\">        this.x *= length;</span></span>\n<span class=\"line\"><span style=\"color: #babed8\">        this.y *= length;</span></span>\n<span class=\"line\"><span style=\"color: #babed8\">        return this;</span></span>\n<span class=\"line\"><span style=\"color: #babed8\">    &#125;;</span></span>\n<span class=\"line\"><span style=\"color: #babed8\">    Point.prototype.normalize = function () &#123;</span></span>\n<span class=\"line\"><span style=\"color: #babed8\">        var length = this.length();</span></span>\n<span class=\"line\"><span style=\"color: #babed8\">        this.x /= length;</span></span>\n<span class=\"line\"><span style=\"color: #babed8\">        this.y /= length;</span></span>\n<span class=\"line\"><span style=\"color: #babed8\">        return this;</span></span>\n<span class=\"line\"><span style=\"color: #babed8\">    &#125;;</span></span>\n<span class=\"line\"><span style=\"color: #babed8\">    return Point;</span></span>\n<span class=\"line\"><span style=\"color: #babed8\">&#125;)();</span></span>\n<span class=\"line\"><span style=\"color: #babed8\"></span></span>\n<span class=\"line\"><span style=\"color: #babed8\">/*</span></span>\n<span class=\"line\"><span style=\"color: #babed8\"> * Particle class</span></span>\n<span class=\"line\"><span style=\"color: #babed8\"> */</span></span>\n<span class=\"line\"><span style=\"color: #babed8\">var Particle = (function () &#123;</span></span>\n<span class=\"line\"><span style=\"color: #babed8\">    function Particle() &#123;</span></span>\n<span class=\"line\"><span style=\"color: #babed8\">        this.position = new Point();</span></span>\n<span class=\"line\"><span style=\"color: #babed8\">        this.velocity = new Point();</span></span>\n<span class=\"line\"><span style=\"color: #babed8\">        this.acceleration = new Point();</span></span>\n<span class=\"line\"><span style=\"color: #babed8\">        this.age = 0;</span></span>\n<span class=\"line\"><span style=\"color: #babed8\">    &#125;</span></span>\n<span class=\"line\"><span style=\"color: #babed8\">    Particle.prototype.initialize = function (x, y, dx, dy) &#123;</span></span>\n<span class=\"line\"><span style=\"color: #babed8\">        this.position.x = x;</span></span>\n<span class=\"line\"><span style=\"color: #babed8\">        this.position.y = y;</span></span>\n<span class=\"line\"><span style=\"color: #babed8\">        this.velocity.x = dx;</span></span>\n<span class=\"line\"><span style=\"color: #babed8\">        this.velocity.y = dy;</span></span>\n<span class=\"line\"><span style=\"color: #babed8\">        this.acceleration.x = dx * settings.particles.effect;</span></span>\n<span class=\"line\"><span style=\"color: #babed8\">        this.acceleration.y = dy * settings.particles.effect;</span></span>\n<span class=\"line\"><span style=\"color: #babed8\">        this.age = 0;</span></span>\n<span class=\"line\"><span style=\"color: #babed8\">    &#125;;</span></span>\n<span class=\"line\"><span style=\"color: #babed8\">    Particle.prototype.update = function (deltaTime) &#123;</span></span>\n<span class=\"line\"><span style=\"color: #babed8\">        this.position.x += this.velocity.x * deltaTime;</span></span>\n<span class=\"line\"><span style=\"color: #babed8\">        this.position.y += this.velocity.y * deltaTime;</span></span>\n<span class=\"line\"><span style=\"color: #babed8\">        this.velocity.x += this.acceleration.x * deltaTime;</span></span>\n<span class=\"line\"><span style=\"color: #babed8\">        this.velocity.y += this.acceleration.y * deltaTime;</span></span>\n<span class=\"line\"><span style=\"color: #babed8\">        this.age += deltaTime;</span></span>\n<span class=\"line\"><span style=\"color: #babed8\">    &#125;;</span></span>\n<span class=\"line\"><span style=\"color: #babed8\">    Particle.prototype.draw = function (context, image) &#123;</span></span>\n<span class=\"line\"><span style=\"color: #babed8\">        function ease(t) &#123;</span></span>\n<span class=\"line\"><span style=\"color: #babed8\">            return --t * t * t + 1;</span></span>\n<span class=\"line\"><span style=\"color: #babed8\">        &#125;</span></span>\n<span class=\"line\"><span style=\"color: #babed8\">        var size = image.width * ease(this.age / settings.particles.duration);</span></span>\n<span class=\"line\"><span style=\"color: #babed8\">        context.globalAlpha = 1 - this.age / settings.particles.duration;</span></span>\n<span class=\"line\"><span style=\"color: #babed8\">        context.drawImage(</span></span>\n<span class=\"line\"><span style=\"color: #babed8\">            image,</span></span>\n<span class=\"line\"><span style=\"color: #babed8\">            this.position.x - size / 2,</span></span>\n<span class=\"line\"><span style=\"color: #babed8\">            this.position.y - size / 2,</span></span>\n<span class=\"line\"><span style=\"color: #babed8\">            size,</span></span>\n<span class=\"line\"><span style=\"color: #babed8\">            size</span></span>\n<span class=\"line\"><span style=\"color: #babed8\">        );</span></span>\n<span class=\"line\"><span style=\"color: #babed8\">    &#125;;</span></span>\n<span class=\"line\"><span style=\"color: #babed8\">    return Particle;</span></span>\n<span class=\"line\"><span style=\"color: #babed8\">&#125;)();</span></span>\n<span class=\"line\"><span style=\"color: #babed8\"></span></span>\n<span class=\"line\"><span style=\"color: #babed8\">/*</span></span>\n<span class=\"line\"><span style=\"color: #babed8\"> * ParticlePool class</span></span>\n<span class=\"line\"><span style=\"color: #babed8\"> */</span></span>\n<span class=\"line\"><span style=\"color: #babed8\">var ParticlePool = (function () &#123;</span></span>\n<span class=\"line\"><span style=\"color: #babed8\">    var particles,</span></span>\n<span class=\"line\"><span style=\"color: #babed8\">        firstActive = 0,</span></span>\n<span class=\"line\"><span style=\"color: #babed8\">        firstFree = 0,</span></span>\n<span class=\"line\"><span style=\"color: #babed8\">        duration = settings.particles.duration;</span></span>\n<span class=\"line\"><span style=\"color: #babed8\"></span></span>\n<span class=\"line\"><span style=\"color: #babed8\">    function ParticlePool(length) &#123;</span></span>\n<span class=\"line\"><span style=\"color: #babed8\">        // create and populate particle pool</span></span>\n<span class=\"line\"><span style=\"color: #babed8\">        particles = new Array(length);</span></span>\n<span class=\"line\"><span style=\"color: #babed8\">        for (var i = 0; i &lt; particles.length; i++)</span></span>\n<span class=\"line\"><span style=\"color: #babed8\">            particles[i] = new Particle();</span></span>\n<span class=\"line\"><span style=\"color: #babed8\">    &#125;</span></span>\n<span class=\"line\"><span style=\"color: #babed8\">    ParticlePool.prototype.add = function (x, y, dx, dy) &#123;</span></span>\n<span class=\"line\"><span style=\"color: #babed8\">        particles[firstFree].initialize(x, y, dx, dy);</span></span>\n<span class=\"line\"><span style=\"color: #babed8\"></span></span>\n<span class=\"line\"><span style=\"color: #babed8\">        // handle circular queue</span></span>\n<span class=\"line\"><span style=\"color: #babed8\">        firstFree++;</span></span>\n<span class=\"line\"><span style=\"color: #babed8\">        if (firstFree == particles.length) firstFree = 0;</span></span>\n<span class=\"line\"><span style=\"color: #babed8\">        if (firstActive == firstFree) firstActive++;</span></span>\n<span class=\"line\"><span style=\"color: #babed8\">        if (firstActive == particles.length) firstActive = 0;</span></span>\n<span class=\"line\"><span style=\"color: #babed8\">    &#125;;</span></span>\n<span class=\"line\"><span style=\"color: #babed8\">    ParticlePool.prototype.update = function (deltaTime) &#123;</span></span>\n<span class=\"line\"><span style=\"color: #babed8\">        var i;</span></span>\n<span class=\"line\"><span style=\"color: #babed8\">        // update active particles</span></span>\n<span class=\"line\"><span style=\"color: #babed8\">        if (firstActive &lt; firstFree) &#123;</span></span>\n<span class=\"line\"><span style=\"color: #babed8\">            for (i = firstActive; i &lt; firstFree; i++)</span></span>\n<span class=\"line\"><span style=\"color: #babed8\">                particles[i].update(deltaTime);</span></span>\n<span class=\"line\"><span style=\"color: #babed8\">        &#125;</span></span>\n<span class=\"line\"><span style=\"color: #babed8\">        if (firstFree &lt; firstActive) &#123;</span></span>\n<span class=\"line\"><span style=\"color: #babed8\">            for (i = firstActive; i &lt; particles.length; i++)</span></span>\n<span class=\"line\"><span style=\"color: #babed8\">                particles[i].update(deltaTime);</span></span>\n<span class=\"line\"><span style=\"color: #babed8\">            for (i = 0; i &lt; firstFree; i++) particles[i].update(deltaTime);</span></span>\n<span class=\"line\"><span style=\"color: #babed8\">        &#125;</span></span>\n<span class=\"line\"><span style=\"color: #babed8\"></span></span>\n<span class=\"line\"><span style=\"color: #babed8\"></span></span>\n<span class=\"line\"><span style=\"color: #babed8\">        // remove inactive particles</span></span>\n<span class=\"line\"><span style=\"color: #babed8\">        while (</span></span>\n<span class=\"line\"><span style=\"color: #babed8\">            particles[firstActive].age &gt;= duration &amp;&amp;</span></span>\n<span class=\"line\"><span style=\"color: #babed8\">            firstActive != firstFree</span></span>\n<span class=\"line\"><span style=\"color: #babed8\">            ) &#123;</span></span>\n<span class=\"line\"><span style=\"color: #babed8\">            firstActive++;</span></span>\n<span class=\"line\"><span style=\"color: #babed8\">            if (firstActive == particles.length) firstActive = 0;</span></span>\n<span class=\"line\"><span style=\"color: #babed8\">        &#125;</span></span>\n<span class=\"line\"><span style=\"color: #babed8\">    &#125;;</span></span>\n<span class=\"line\"><span style=\"color: #babed8\">    ParticlePool.prototype.draw = function (context, image) &#123;</span></span>\n<span class=\"line\"><span style=\"color: #babed8\">        // draw active particles</span></span>\n<span class=\"line\"><span style=\"color: #babed8\">        if (firstActive &lt; firstFree) &#123;</span></span>\n<span class=\"line\"><span style=\"color: #babed8\">            for (i = firstActive; i &lt; firstFree; i++)</span></span>\n<span class=\"line\"><span style=\"color: #babed8\">                particles[i].draw(context, image);</span></span>\n<span class=\"line\"><span style=\"color: #babed8\">        &#125;</span></span>\n<span class=\"line\"><span style=\"color: #babed8\">        if (firstFree &lt; firstActive) &#123;</span></span>\n<span class=\"line\"><span style=\"color: #babed8\">            for (i = firstActive; i &lt; particles.length; i++)</span></span>\n<span class=\"line\"><span style=\"color: #babed8\">                particles[i].draw(context, image);</span></span>\n<span class=\"line\"><span style=\"color: #babed8\">            for (i = 0; i &lt; firstFree; i++) particles[i].draw(context, image);</span></span>\n<span class=\"line\"><span style=\"color: #babed8\">        &#125;</span></span>\n<span class=\"line\"><span style=\"color: #babed8\">    &#125;;</span></span>\n<span class=\"line\"><span style=\"color: #babed8\">    return ParticlePool;</span></span>\n<span class=\"line\"><span style=\"color: #babed8\">&#125;)();</span></span>\n<span class=\"line\"><span style=\"color: #babed8\">/*</span></span>\n<span class=\"line\"><span style=\"color: #babed8\">  * Putting it all together</span></span>\n<span class=\"line\"><span style=\"color: #babed8\">  */</span></span>\n<span class=\"line\"><span style=\"color: #babed8\">(function (canvas) &#123;</span></span>\n<span class=\"line\"><span style=\"color: #babed8\">    var context = canvas.getContext(&quot;2d&quot;),</span></span>\n<span class=\"line\"><span style=\"color: #babed8\">        particles = new ParticlePool(settings.particles.length),</span></span>\n<span class=\"line\"><span style=\"color: #babed8\">        particleRate =</span></span>\n<span class=\"line\"><span style=\"color: #babed8\">            settings.particles.length / settings.particles.duration, // particles/sec</span></span>\n<span class=\"line\"><span style=\"color: #babed8\">        time;</span></span>\n<span class=\"line\"><span style=\"color: #babed8\"></span></span>\n<span class=\"line\"><span style=\"color: #babed8\"></span></span>\n<span class=\"line\"><span style=\"color: #babed8\">    // get point on heart with -PI &lt;= t &lt;= PI</span></span>\n<span class=\"line\"><span style=\"color: #babed8\">    function pointOnHeart(t) &#123;</span></span>\n<span class=\"line\"><span style=\"color: #babed8\">        return new Point(</span></span>\n<span class=\"line\"><span style=\"color: #babed8\">            160 * Math.pow(Math.sin(t), 3),</span></span>\n<span class=\"line\"><span style=\"color: #babed8\">            130 * Math.cos(t) -</span></span>\n<span class=\"line\"><span style=\"color: #babed8\">            50 * Math.cos(2 * t) -</span></span>\n<span class=\"line\"><span style=\"color: #babed8\">            20 * Math.cos(3 * t) -</span></span>\n<span class=\"line\"><span style=\"color: #babed8\">            10 * Math.cos(4 * t) +</span></span>\n<span class=\"line\"><span style=\"color: #babed8\">            25</span></span>\n<span class=\"line\"><span style=\"color: #babed8\">        );</span></span>\n<span class=\"line\"><span style=\"color: #babed8\">    &#125;</span></span>\n<span class=\"line\"><span style=\"color: #babed8\"></span></span>\n<span class=\"line\"><span style=\"color: #babed8\">    // creating the particle image using a dummy canvas</span></span>\n<span class=\"line\"><span style=\"color: #babed8\">    var image = (function () &#123;</span></span>\n<span class=\"line\"><span style=\"color: #babed8\">        var canvas = document.createElement(&quot;canvas&quot;),</span></span>\n<span class=\"line\"><span style=\"color: #babed8\">            context = canvas.getContext(&quot;2d&quot;);</span></span>\n<span class=\"line\"><span style=\"color: #babed8\">        canvas.width = settings.particles.size;</span></span>\n<span class=\"line\"><span style=\"color: #babed8\">        canvas.height = settings.particles.size;</span></span>\n<span class=\"line\"><span style=\"color: #babed8\">        // helper function to create the path</span></span>\n<span class=\"line\"><span style=\"color: #babed8\">        function to(t) &#123;</span></span>\n<span class=\"line\"><span style=\"color: #babed8\">            var point = pointOnHeart(t);</span></span>\n<span class=\"line\"><span style=\"color: #babed8\">            point.x =</span></span>\n<span class=\"line\"><span style=\"color: #babed8\">                settings.particles.size / 2 +</span></span>\n<span class=\"line\"><span style=\"color: #babed8\">                (point.x * settings.particles.size) / 350;</span></span>\n<span class=\"line\"><span style=\"color: #babed8\">            point.y =</span></span>\n<span class=\"line\"><span style=\"color: #babed8\">                settings.particles.size / 2 -</span></span>\n<span class=\"line\"><span style=\"color: #babed8\">                (point.y * settings.particles.size) / 350;</span></span>\n<span class=\"line\"><span style=\"color: #babed8\">            return point;</span></span>\n<span class=\"line\"><span style=\"color: #babed8\">        &#125;</span></span>\n<span class=\"line\"><span style=\"color: #babed8\">        // create the path</span></span>\n<span class=\"line\"><span style=\"color: #babed8\">        context.beginPath();</span></span>\n<span class=\"line\"><span style=\"color: #babed8\">        var t = -Math.PI;</span></span>\n<span class=\"line\"><span style=\"color: #babed8\">        var point = to(t);</span></span>\n<span class=\"line\"><span style=\"color: #babed8\">        context.moveTo(point.x, point.y);</span></span>\n<span class=\"line\"><span style=\"color: #babed8\">        while (t &lt; Math.PI) &#123;</span></span>\n<span class=\"line\"><span style=\"color: #babed8\">            t += 0.01; // baby steps!</span></span>\n<span class=\"line\"><span style=\"color: #babed8\">            point = to(t);</span></span>\n<span class=\"line\"><span style=\"color: #babed8\">            context.lineTo(point.x, point.y);</span></span>\n<span class=\"line\"><span style=\"color: #babed8\">        &#125;</span></span>\n<span class=\"line\"><span style=\"color: #babed8\">        context.closePath();</span></span>\n<span class=\"line\"><span style=\"color: #babed8\">        // create the fill</span></span>\n<span class=\"line\"><span style=\"color: #babed8\">        context.fillStyle = &quot;#ea80b0&quot;;</span></span>\n<span class=\"line\"><span style=\"color: #babed8\">        context.fill();</span></span>\n<span class=\"line\"><span style=\"color: #babed8\">        // create the image</span></span>\n<span class=\"line\"><span style=\"color: #babed8\">        var image = new Image();</span></span>\n<span class=\"line\"><span style=\"color: #babed8\">        image.src = canvas.toDataURL();</span></span>\n<span class=\"line\"><span style=\"color: #babed8\">        return image;</span></span>\n<span class=\"line\"><span style=\"color: #babed8\">    &#125;)();</span></span>\n<span class=\"line\"><span style=\"color: #babed8\"></span></span>\n<span class=\"line\"><span style=\"color: #babed8\">    // render that thing!</span></span>\n<span class=\"line\"><span style=\"color: #babed8\">    function render() &#123;</span></span>\n<span class=\"line\"><span style=\"color: #babed8\">        // next animation frame</span></span>\n<span class=\"line\"><span style=\"color: #babed8\">        requestAnimationFrame(render);</span></span>\n<span class=\"line\"><span style=\"color: #babed8\"></span></span>\n<span class=\"line\"><span style=\"color: #babed8\">        // update time</span></span>\n<span class=\"line\"><span style=\"color: #babed8\">        var newTime = new Date().getTime() / 1000,</span></span>\n<span class=\"line\"><span style=\"color: #babed8\">            deltaTime = newTime - (time || newTime);</span></span>\n<span class=\"line\"><span style=\"color: #babed8\">        time = newTime;</span></span>\n<span class=\"line\"><span style=\"color: #babed8\"></span></span>\n<span class=\"line\"><span style=\"color: #babed8\">        // clear canvas</span></span>\n<span class=\"line\"><span style=\"color: #babed8\">        context.clearRect(0, 0, canvas.width, canvas.height);</span></span>\n<span class=\"line\"><span style=\"color: #babed8\"></span></span>\n<span class=\"line\"><span style=\"color: #babed8\">        // create new particles</span></span>\n<span class=\"line\"><span style=\"color: #babed8\">        var amount = particleRate * deltaTime;</span></span>\n<span class=\"line\"><span style=\"color: #babed8\">        for (var i = 0; i &lt; amount; i++) &#123;</span></span>\n<span class=\"line\"><span style=\"color: #babed8\">            var pos = pointOnHeart(Math.PI - 2 * Math.PI * Math.random());</span></span>\n<span class=\"line\"><span style=\"color: #babed8\">            var dir = pos.clone().length(settings.particles.velocity);</span></span>\n<span class=\"line\"><span style=\"color: #babed8\">            particles.add(</span></span>\n<span class=\"line\"><span style=\"color: #babed8\">                canvas.width / 2 + pos.x,</span></span>\n<span class=\"line\"><span style=\"color: #babed8\">                canvas.height / 2 - pos.y,</span></span>\n<span class=\"line\"><span style=\"color: #babed8\">                dir.x,</span></span>\n<span class=\"line\"><span style=\"color: #babed8\">                -dir.y</span></span>\n<span class=\"line\"><span style=\"color: #babed8\">            );</span></span>\n<span class=\"line\"><span style=\"color: #babed8\">        &#125;</span></span>\n<span class=\"line\"><span style=\"color: #babed8\"></span></span>\n<span class=\"line\"><span style=\"color: #babed8\">        // update and draw particles</span></span>\n<span class=\"line\"><span style=\"color: #babed8\">        particles.update(deltaTime);</span></span>\n<span class=\"line\"><span style=\"color: #babed8\">        particles.draw(context, image);</span></span>\n<span class=\"line\"><span style=\"color: #babed8\">    &#125;</span></span>\n<span class=\"line\"><span style=\"color: #babed8\"></span></span>\n<span class=\"line\"><span style=\"color: #babed8\">    // handle (re-)sizing of the canvas</span></span>\n<span class=\"line\"><span style=\"color: #babed8\">    function onResize() &#123;</span></span>\n<span class=\"line\"><span style=\"color: #babed8\">        canvas.width = canvas.clientWidth;</span></span>\n<span class=\"line\"><span style=\"color: #babed8\">        canvas.height = canvas.clientHeight;</span></span>\n<span class=\"line\"><span style=\"color: #babed8\">    &#125;</span></span>\n<span class=\"line\"><span style=\"color: #babed8\">    window.onresize = onResize;</span></span>\n<span class=\"line\"><span style=\"color: #babed8\"></span></span>\n<span class=\"line\"><span style=\"color: #babed8\">    // delay rendering bootstrap</span></span>\n<span class=\"line\"><span style=\"color: #babed8\">    setTimeout(function () &#123;</span></span>\n<span class=\"line\"><span style=\"color: #babed8\">        onResize();</span></span>\n<span class=\"line\"><span style=\"color: #babed8\">        render();</span></span>\n<span class=\"line\"><span style=\"color: #babed8\">    &#125;, 10);</span></span>\n<span class=\"line\"><span style=\"color: #babed8\">&#125;)(document.getElementById(&quot;pinkboard&quot;));</span></span></code></pre></div><p></script></p>\n<script>\n    var RENDERER = {\n        INIT_CHERRY_BLOSSOM_COUNT: 30,\n        MAX_ADDING_INTERVAL: 10,\n\n        init: function () {\n            this.setParameters();\n            this.reconstructMethods();\n            this.createCherries();\n            this.render();\n            if (\n                navigator.userAgent.match(\n                    /(phone|pod|iPhone|iPod|ios|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i\n                )\n            ) {\n                // var box = document.querySelectorAll(\".box\")[0];\n                // console.log(box, \"移动端\");\n                // box.style.marginTop = \"65%\";\n            }\n        },\n        setParameters: function () {\n            this.$container = $(\"#jsi-cherry-container\");\n            this.width = this.$container.width();\n            this.height = this.$container.height();\n            this.context = $(\"<canvas />\")\n                .attr({ width: this.width, height: this.height })\n                .appendTo(this.$container)\n                .get(0)\n            var rate = this.FOCUS_POSITION / (this.z + this.FOCUS_POSITION),\n                x = this.renderer.width / 2 + this.x * rate,\n                y = this.renderer.height / 2 - this.y * rate;\n            return { rate: rate, x: x, y: y };\n        },\n        re\n    }\n    } else {\n        this.phi += Math.PI / (axis.y == this.thresholdY ? 200 : 500);\n        this.phi %= Math.PI;\n    }\n    if (this.y <= -this.renderer.height * this.SURFACE_RATE) {\n        this.x += 2;\n        this.y = -this.renderer.height * this.SURFACE_RATE;\n    } else {\n        this.x += this.vx;\n        this.y += this.vy;\n    }\n    return (\n        this.z > -this.FOCUS_POSITION &&\n        this.z < this.FAR_LIMIT &&\n        this.x < this.renderer.width * 1.5\n    );\n    },\n    };\n    $(function () {\n        RENDERER.init();\n    });\n</script>\n\n\n</body>\n</html>\n","feature":false,"text":" Title 爱心 body{ overflow: hidden; margin: 0; } h1{ position: fixed; top: 30%; le...","permalink":"/post/ntest - 副本","photos":[],"count_time":{"symbolsCount":"13k","symbolsTime":"12 mins."},"categories":[{"name":"Cate","slug":"Cate","count":5,"path":"api/categories/Cate.json"}],"tags":[{"name":"测试","slug":"测试","count":3,"path":"api/tags/测试.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#h1\"><span class=\"toc-text\"></span></a></li></ol>","author":{"name":"星辰星宇1314","slug":"blog-author","avatar":"http://qsy1225.github.io/photos/head.jpg","link":"http://github.com/qsy1225","description":"一名普通的大学生","socials":{"github":"https://github.com/qsy1225","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/img/bili.png","link":"https://space.bilibili.com/521368016？spm_id_from=333.1007.0.0"},"facebook":{"icon":"/svg/facebook.svg","link":"http://www.facebook.com/profile.php?id=100077070159946"}}}},"mapped":true,"hidden":false,"prev_post":{"title":"测试代码","uid":"e6cf42afdb1b98711d2c514c2756a0e1","slug":"ntest","date":"2024-03-11T11:02:45.000Z","updated":"2024-03-11T11:03:22.803Z","comments":true,"path":"api/articles/ntest.json","keywords":null,"cover":null,"text":" 登陆页面 登陆\\注册 账号： 密码： 登 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;录 function login(){ console....","permalink":"/post/ntest","photos":[],"count_time":{"symbolsCount":"2.4k","symbolsTime":"2 mins."},"categories":[{"name":"Cate","slug":"Cate","count":5,"path":"api/categories/Cate.json"}],"tags":[{"name":"测试","slug":"测试","count":3,"path":"api/tags/测试.json"}],"author":{"name":"星辰星宇1314","slug":"blog-author","avatar":"http://qsy1225.github.io/photos/head.jpg","link":"http://github.com/qsy1225","description":"一名普通的大学生","socials":{"github":"https://github.com/qsy1225","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/img/bili.png","link":"https://space.bilibili.com/521368016？spm_id_from=333.1007.0.0"},"facebook":{"icon":"/svg/facebook.svg","link":"http://www.facebook.com/profile.php?id=100077070159946"}}}},"feature":false},"next_post":{"title":"香蕉君","uid":"a15f48d9a10435dbb33df4b2286191af","slug":"t3pa","date":"2024-03-11T07:38:36.000Z","updated":"2024-03-11T08:17:07.811Z","comments":true,"path":"api/articles/t3pa.json","keywords":null,"cover":"https://lc-gluttony.s3.amazonaws.com/DEJfSszPd2BN/cPqE1byaKdTBtuByuM39OxmiPhnfc2WE/bananaa.png","text":"试试用html代码放视频 ","permalink":"/post/t3pa","photos":[],"count_time":{"symbolsCount":13,"symbolsTime":"1 mins."},"categories":[{"name":"资源","slug":"资源","count":1,"path":"api/categories/资源.json"}],"tags":[],"author":{"name":"星辰星宇1314","slug":"blog-author","avatar":"http://qsy1225.github.io/photos/head.jpg","link":"http://github.com/qsy1225","description":"一名普通的大学生","socials":{"github":"https://github.com/qsy1225","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/img/bili.png","link":"https://space.bilibili.com/521368016？spm_id_from=333.1007.0.0"},"facebook":{"icon":"/svg/facebook.svg","link":"http://www.facebook.com/profile.php?id=100077070159946"}}}},"feature":false}}