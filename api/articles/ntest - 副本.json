{"title":"测试代码2","uid":"048892b59aabada35c298130c9b4c7b4","slug":"ntest - 副本","date":"2024-03-11T11:02:45.000Z","updated":"2024-03-11T11:25:11.105Z","comments":true,"path":"api/articles/ntest - 副本.json","keywords":null,"cover":null,"content":"<!DOCTYPE html>\n<html lang=\"en\" >\n \n<head>\n <meta charset=\"UTF-8\">\n \n <title>Musical Christmas Lights</title>\n \n <link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/normalize/5.0.0/normalize.min.css\">\n \n <style>\n  * {\n   box-sizing: border-box;\n  }\n \n  body {\n   margin: 0;\n   height: 100vh;\n   overflow: hidden;\n   display: flex;\n   align-items: center;\n   justify-content: center;\n   background: #161616;\n   color: #c5a880;\n   font-family: sans-serif;\n  }\n \n  label {\n   display: inline-block;\n   background-color: #161616;\n   padding: 16px;\n   border-radius: 0.3rem;\n   cursor: pointer;\n   margin-top: 1rem;\n   width: 300px;\n   border-radius: 10px;\n   border: 1px solid #c5a880;\n   text-align: center;\n  }\n \n  ul {\n   list-style-type: none;\n   padding: 0;\n   margin: 0;\n  }\n \n  .btn {\n   background-color: #161616;\n   border-radius: 10px;\n   color: #c5a880;\n   border: 1px solid #c5a880;\n   padding: 16px;\n   width: 300px;\n   margin-bottom: 16px;\n   line-height: 1.5;\n   cursor: pointer;\n  }\n  .separator {\n   font-weight: bold;\n   text-align: center;\n   width: 300px;\n   margin: 16px 0px;\n   color: #a07676;\n  }\n \n  .title {\n   color: #a07676;\n   font-weight: bold;\n   font-size: 1.25rem;\n   margin-bottom: 16px;\n  }\n \n  .text-loading {\n   font-size: 2rem;\n  }\n </style>\n <script>\n  window.console = window.console || function(t) {};\n </script>\n <script>\n  if (document.location.search.match(/type=embed/gi)) {\n   window.parent.postMessage(\"resize\", \"*\");\n  }\n </script>\n</head>\n \n<body translate=\"no\" >\n <script src=\"https://cdn.jsdelivr.net/npm/three@0.115.0/build/three.min.js\"></script>\n <script src=\"https://cdn.jsdelivr.net/npm/three@0.115.0/examples/js/postprocessing/EffectComposer.js\"></script>\n <script src=\"https://cdn.jsdelivr.net/npm/three@0.115.0/examples/js/postprocessing/RenderPass.js\"></script>\n <script src=\"https://cdn.jsdelivr.net/npm/three@0.115.0/examples/js/postprocessing/ShaderPass.js\"></script>\n <script src=\"https://cdn.jsdelivr.net/npm/three@0.115.0/examples/js/shaders/CopyShader.js\"></script>\n <script src=\"https://cdn.jsdelivr.net/npm/three@0.115.0/examples/js/shaders/LuminosityHighPassShader.js\"></script>\n <script src=\"https://cdn.jsdelivr.net/npm/three@0.115.0/examples/js/postprocessing/UnrealBloomPass.js\"></script>\n \n <div id=\"overlay\">\n  <ul>\n   <li class=\"title\">请选择音乐</li>\n   <li>\n    <button class=\"btn\" id=\"btnA\" type=\"button\">\n     Snowflakes Falling Down by Simon Panrucker\n    </button>\n   </li>\n   <li><button class=\"btn\" id=\"btnB\" type=\"button\">This Christmas by Dott</button></li>\n   <li><button class=\"btn\" id=\"btnC\" type=\"button\">No room at the inn by TRG Banks</button></li>\n   <li><button class=\"btn\" id=\"btnD\" type=\"button\">Jingle Bell Swing by Mark Smeby</button></li>\n   <li class=\"separator\">或者</li>\n   <li>\n    <input type=\"file\" id=\"upload\" hidden />\n    <label for=\"upload\">file</label>\n   </li>\n  </ul>\n </div>\n \n <script id=\"rendered-js\" >\n  const { PI, sin, cos } = Math;\n  const TAU = 2 * PI;\n \n  const map = (value, sMin, sMax, dMin, dMax) => {\n   return dMin + (value - sMin) / (sMax - sMin) * (dMax - dMin);\n  };\n \n  const range = (n, m = 0) =>\n  Array(n).\n  fill(m).\n  map((i, j) => i + j);\n \n  const rand = (max, min = 0) => min + Math.random() * (max - min);\n  const randInt = (max, min = 0) => Math.floor(min + Math.random() * (max - min));\n  const randChoise = arr => arr[randInt(arr.length)];\n  const polar = (ang, r = 1) => [r * cos(ang), r * sin(ang)];\n \n  let scene, camera, renderer, analyser;\n  let step = 0;\n  const uniforms = {\n   time: { type: \"f\", value: 0.0 },\n   step: { type: \"f\", value: 0.0 } };\n \n   const params = {\n    exposure: 1,\n    bloomStrength: 0.9,\n    bloomThreshold: 0,\n    bloomRadius: 0.5 };\n \n    let composer;\n \n    const fftSize = 2048;\n    const totalPoints = 4000;\n \n    const listener = new THREE.AudioListener();\n \n    const audio = new THREE.Audio(listener);\n \n    document.querySelector(\"input\").addEventListener(\"change\", uploadAudio, false);\n \n    const buttons = document.querySelectorAll(\".btn\");\n    buttons.forEach((button, index) =>\n     button.addEventListener(\"click\", () => loadAudio(index)));\n \n \n    function init() {\n     const overlay = document.getElementById(\"overlay\");\n     overlay.remove();\n \n     scene = new THREE.Scene();\n     renderer = new THREE.WebGLRenderer({ antialias: true });\n     renderer.setPixelRatio(window.devicePixelRatio);\n     renderer.setSize(window.innerWidth, window.innerHeight);\n     document.body.appendChild(renderer.domElement);\n \n     camera = new THREE.PerspectiveCamera(\n      60,\n      window.innerWidth / window.innerHeight,\n      1,\n      1000);\n \n     camera.position.set(-0.09397456774197047, -2.5597086635726947, 24.420789670889008);\n     camera.rotation.set(0.10443543723052419, -0.003827152981119352, 0.0004011488708739715);\n \n     const format = renderer.capabilities.isWebGL2 ?\n     THREE.RedFormat :\n     THREE.LuminanceFormat;\n \n     uniforms.tAudioData = {\n      value: new THREE.DataTexture(analyser.data, fftSize / 2, 1, format) };\n \n \n      addPlane(scene, uniforms, 3000);\n      addSnow(scene, uniforms);\n \n      range(10).map(i => {\n       addTree(scene, uniforms, totalPoints, [20, 0, -20 * i]);\n       addTree(scene, uniforms, totalPoints, [-20, 0, -20 * i]);\n      });\n \n      const renderScene = new THREE.RenderPass(scene, camera);\n \n      const bloomPass = new THREE.UnrealBloomPass(\n       new THREE.Vector2(window.innerWidth, window.innerHeight),\n       1.5,\n       0.4,\n       0.85);\n \n      bloomPass.threshold = params.bloomThreshold;\n      bloomPass.strength = params.bloomStrength;\n      bloomPass.radius = params.bloomRadius;\n \n      composer = new THREE.EffectComposer(renderer);\n      composer.addPass(renderScene);\n      composer.addPass(bloomPass);\n \n      addListners(camera, renderer, composer);\n      animate();\n     }\n \n     function animate(time) {\n      analyser.getFrequencyData();\n      uniforms.tAudioData.value.needsUpdate = true;\n      step = (step + 1) % 1000;\n      uniforms.time.value = time;\n      uniforms.step.value = step;\n      composer.render();\n      requestAnimationFrame(animate);\n     }\n \n     function loadAudio(i) {\n      document.getElementById(\"overlay\").innerHTML =\n      '<div class=\"text-loading\">等一下哈 马上来啦...</div>';\n      const files = [\n      \"https://files.freemusicarchive.org/storage-freemusicarchive-org/music/no_curator/Simon_Panrucker/Happy_Christmas_You_Guys/Simon_Panrucker_-_01_-_Snowflakes_Falling_Down.mp3\",\n      \"https://files.freemusicarchive.org/storage-freemusicarchive-org/music/no_curator/Dott/This_Christmas/Dott_-_01_-_This_Christmas.mp3\",\n      \"https://files.freemusicarchive.org/storage-freemusicarchive-org/music/ccCommunity/TRG_Banks/TRG_Banks_Christmas_Album/TRG_Banks_-_12_-_No_room_at_the_inn.mp3\",\n      \"https://files.freemusicarchive.org/storage-freemusicarchive-org/music/ccCommunity/Mark_Smeby/En_attendant_Nol/Mark_Smeby_-_07_-_Jingle_Bell_Swing.mp3\"];\n \n      const file = files[i];\n \n      const loader = new THREE.AudioLoader();\n      loader.load(file, function (buffer) {\n       audio.setBuffer(buffer);\n       audio.play();\n       analyser = new THREE.AudioAnalyser(audio, fftSize);\n       init();\n      });\n \n \n \n \n     }\n \n \n     function uploadAudio(event) {\n      document.getElementById(\"overlay\").innerHTML =\n      '<div class=\"text-loading\">等一下哈 马上来啦...</div>';\n      const files = event.target.files;\n      const reader = new FileReader();\n \n      reader.onload = function (file) {\n       var arrayBuffer = file.target.result;\n \n       listener.context.decodeAudioData(arrayBuffer, function (audioBuffer) {\n        audio.setBuffer(audioBuffer);\n        audio.play();\n        analyser = new THREE.AudioAnalyser(audio, fftSize);\n        init();\n       });\n      };\n \n      reader.readAsArrayBuffer(files[0]);\n     }\n \n     function addTree(scene, uniforms, totalPoints, treePosition) {\n      const vertexShader = `\n      attribute float mIndex;\n      varying vec3 vColor;\n      varying float opacity;\n      uniform sampler2D tAudioData;\n      float norm(float value, float min, float max ){\n       return (value - min) / (max - min);\n      }\n      float lerp(float norm, float min, float max){\n       return (max - min) * norm + min;\n      }\n      float map(float value, float sourceMin, float sourceMax, float destMin, float destMax){\n       return lerp(norm(value, sourceMin, sourceMax), destMin, destMax);\n      }\n      void main() {\n       vColor = color;\n       vec3 p = position;\n       vec4 mvPosition = modelViewMatrix * vec4( p, 1.0 );\n       float amplitude = texture2D( tAudioData, vec2( mIndex, 0.1 ) ).r;\n       float amplitudeClamped = clamp(amplitude-0.4,0.0, 0.6 );\n       float sizeMapped = map(amplitudeClamped, 0.0, 0.6, 1.0, 20.0);\n       opacity = map(mvPosition.z , -200.0, 15.0, 0.0, 1.0);\n       gl_PointSize = sizeMapped * ( 100.0 / -mvPosition.z );\n       gl_Position = projectionMatrix * mvPosition;\n      }\n      `;\n      const fragmentShader = `\n      varying vec3 vColor;\n      varying float opacity;\n      uniform sampler2D pointTexture;\n      void main() {\n       gl_FragColor = vec4( vColor, opacity );\n       gl_FragColor = gl_FragColor * texture2D( pointTexture, gl_PointCoord ); \n      }\n      `;\n      const shaderMaterial = new THREE.ShaderMaterial({\n       uniforms: {\n        ...uniforms,\n        pointTexture: {\n         value: new THREE.TextureLoader().load(`https://assets.codepen.io/3685267/spark1.png`) } },\n \n \n         vertexShader,\n         fragmentShader,\n         blending: THREE.AdditiveBlending,\n         depthTest: false,\n         transparent: true,\n         vertexColors: true });\n \n \n      const geometry = new THREE.BufferGeometry();\n      const positions = [];\n      const colors = [];\n      const sizes = [];\n      const phases = [];\n      const mIndexs = [];\n \n      const color = new THREE.Color();\n \n      for (let i = 0; i < totalPoints; i++) {\n       const t = Math.random();\n       const y = map(t, 0, 1, -8, 10);\n       const ang = map(t, 0, 1, 0, 6 * TAU) + TAU / 2 * (i % 2);\n       const [z, x] = polar(ang, map(t, 0, 1, 5, 0));\n \n       const modifier = map(t, 0, 1, 1, 0);\n       positions.push(x + rand(-0.3 * modifier, 0.3 * modifier));\n       positions.push(y + rand(-0.3 * modifier, 0.3 * modifier));\n       positions.push(z + rand(-0.3 * modifier, 0.3 * modifier));\n \n       color.setHSL(map(i, 0, totalPoints, 1.0, 0.0), 1.0, 0.5);\n \n       colors.push(color.r, color.g, color.b);\n       phases.push(rand(1000));\n       sizes.push(1);\n       const mIndex = map(i, 0, totalPoints, 1.0, 0.0);\n       mIndexs.push(mIndex);\n      }\n \n      geometry.setAttribute(\n       \"position\",\n       new THREE.Float32BufferAttribute(positions, 3).setUsage(\n        THREE.DynamicDrawUsage));\n \n \n      geometry.setAttribute(\"color\", new THREE.Float32BufferAttribute(colors, 3));\n      geometry.setAttribute(\"size\", new THREE.Float32BufferAttribute(sizes, 1));\n      geometry.setAttribute(\"phase\", new THREE.Float32BufferAttribute(phases, 1));\n      geometry.setAttribute(\"mIndex\", new THREE.Float32BufferAttribute(mIndexs, 1));\n \n      const tree = new THREE.Points(geometry, shaderMaterial);\n \n      const [px, py, pz] = treePosition;\n \n      tree.position.x = px;\n      tree.position.y = py;\n      tree.position.z = pz;\n \n      scene.add(tree);\n     }\n \n     function addSnow(scene, uniforms) {\n      const vertexShader = `\n      attribute float size;\n      attribute float phase;\n      attribute float phaseSecondary;\n      varying vec3 vColor;\n      varying float opacity;\n      uniform float time;\n      uniform float step;\n      float norm(float value, float min, float max ){\n       return (value - min) / (max - min);\n      }\n      float lerp(float norm, float min, float max){\n       return (max - min) * norm + min;\n      }\n      float map(float value, float sourceMin, float sourceMax, float destMin, float destMax){\n       return lerp(norm(value, sourceMin, sourceMax), destMin, destMax);\n      }\n      void main() {\n       float t = time* 0.0006;\n       vColor = color;\n       vec3 p = position;\n       p.y = map(mod(phase+step, 1000.0), 0.0, 1000.0, 25.0, -8.0);\n       p.x += sin(t+phase);\n       p.z += sin(t+phaseSecondary);\n       opacity = map(p.z, -150.0, 15.0, 0.0, 1.0);\n       vec4 mvPosition = modelViewMatrix * vec4( p, 1.0 );\n       gl_PointSize = size * ( 100.0 / -mvPosition.z );\n       gl_Position = projectionMatrix * mvPosition;\n      }\n      `;\n \n      const fragmentShader = `\n      uniform sampler2D pointTexture;\n      varying vec3 vColor;\n      varying float opacity;\n      void main() {\n       gl_FragColor = vec4( vColor, opacity );\n       gl_FragColor = gl_FragColor * texture2D( pointTexture, gl_PointCoord ); \n      }\n      `;\n      function createSnowSet(sprite) {\n       const totalPoints = 300;\n       const shaderMaterial = new THREE.ShaderMaterial({\n        uniforms: {\n         ...uniforms,\n         pointTexture: {\n          value: new THREE.TextureLoader().load(sprite) } },\n \n \n          vertexShader,\n          fragmentShader,\n          blending: THREE.AdditiveBlending,\n          depthTest: false,\n          transparent: true,\n          vertexColors: true });\n \n \n       const geometry = new THREE.BufferGeometry();\n       const positions = [];\n       const colors = [];\n       const sizes = [];\n       const phases = [];\n       const phaseSecondaries = [];\n \n       const color = new THREE.Color();\n \n       for (let i = 0; i < totalPoints; i++) {\n        const [x, y, z] = [rand(25, -25), 0, rand(15, -150)];\n        positions.push(x);\n        positions.push(y);\n        positions.push(z);\n \n        color.set(randChoise([\"#f1d4d4\", \"#f1f6f9\", \"#eeeeee\", \"#f1f1e8\"]));\n \n        colors.push(color.r, color.g, color.b);\n        phases.push(rand(1000));\n        phaseSecondaries.push(rand(1000));\n        sizes.push(rand(4, 2));\n       }\n \n       geometry.setAttribute(\n        \"position\",\n        new THREE.Float32BufferAttribute(positions, 3));\n \n       geometry.setAttribute(\"color\", new THREE.Float32BufferAttribute(colors, 3));\n       geometry.setAttribute(\"size\", new THREE.Float32BufferAttribute(sizes, 1));\n       geometry.setAttribute(\"phase\", new THREE.Float32BufferAttribute(phases, 1));\n       geometry.setAttribute(\n        \"phaseSecondary\",\n        new THREE.Float32BufferAttribute(phaseSecondaries, 1));\n \n \n       const mesh = new THREE.Points(geometry, shaderMaterial);\n \n       scene.add(mesh);\n      }\n      const sprites = [\n      \"https://assets.codepen.io/3685267/snowflake1.png\",\n      \"https://assets.codepen.io/3685267/snowflake2.png\",\n      \"https://assets.codepen.io/3685267/snowflake3.png\",\n      \"https://assets.codepen.io/3685267/snowflake4.png\",\n      \"https://assets.codepen.io/3685267/snowflake5.png\"];\n \n      sprites.forEach(sprite => {\n       createSnowSet(sprite);\n      });\n     }\n \n     function addPlane(scene, uniforms, totalPoints) {\n      const vertexShader = `\n      attribute float size;\n      attribute vec3 customColor;\n      varying vec3 vColor;\n      void main() {\n       vColor = customColor;\n       vec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );\n       gl_PointSize = size * ( 300.0 / -mvPosition.z );\n       gl_Position = projectionMatrix * mvPosition;\n      }\n      `;\n      const fragmentShader = `\n      uniform vec3 color;\n      uniform sampler2D pointTexture;\n      varying vec3 vColor;\n      void main() {\n       gl_FragColor = vec4( vColor, 1.0 );\n       gl_FragColor = gl_FragColor * texture2D( pointTexture, gl_PointCoord );\n      }\n      `;\n      const shaderMaterial = new THREE.ShaderMaterial({\n       uniforms: {\n        ...uniforms,\n        pointTexture: {\n         value: new THREE.TextureLoader().load(`https://assets.codepen.io/3685267/spark1.png`) } },\n \n \n         vertexShader,\n         fragmentShader,\n         blending: THREE.AdditiveBlending,\n         depthTest: false,\n         transparent: true,\n         vertexColors: true });\n \n \n      const geometry = new THREE.BufferGeometry();\n      const positions = [];\n      const colors = [];\n      const sizes = [];\n \n      const color = new THREE.Color();\n \n      for (let i = 0; i < totalPoints; i++) {\n       const [x, y, z] = [rand(-25, 25), 0, rand(-150, 15)];\n       positions.push(x);\n       positions.push(y);\n       positions.push(z);\n \n       color.set(randChoise([\"#93abd3\", \"#f2f4c0\", \"#9ddfd3\"]));\n \n       colors.push(color.r, color.g, color.b);\n       sizes.push(1);\n      }\n \n      geometry.setAttribute(\n       \"position\",\n       new THREE.Float32BufferAttribute(positions, 3).setUsage(\n        THREE.DynamicDrawUsage));\n \n \n      geometry.setAttribute(\n       \"customColor\",\n       new THREE.Float32BufferAttribute(colors, 3));\n \n      geometry.setAttribute(\"size\", new THREE.Float32BufferAttribute(sizes, 1));\n \n      const plane = new THREE.Points(geometry, shaderMaterial);\n \n      plane.position.y = -8;\n      scene.add(plane);\n     }\n \n     function addListners(camera, renderer, composer) {\n      document.addEventListener(\"keydown\", e => {\n       const { x, y, z } = camera.position;\n       console.log(`camera.position.set(${x},${y},${z})`);\n       const { x: a, y: b, z: c } = camera.rotation;\n       console.log(`camera.rotation.set(${a},${b},${c})`);\n      });\n \n      window.addEventListener(\n       \"resize\",\n       () => {\n        const width = window.innerWidth;\n        const height = window.innerHeight;\n \n        camera.aspect = width / height;\n        camera.updateProjectionMatrix();\n \n        renderer.setSize(width, height);\n        composer.setSize(width, height);\n       },\n       false);\n \n     }\n</script>\n</body>\n \n</html>","feature":false,"text":" Musical Christmas Lights * { box-sizing: border-box; } body { margin: 0; height...","permalink":"/post/ntest - 副本","photos":[],"count_time":{"symbolsCount":"10k","symbolsTime":"9 mins."},"categories":[{"name":"Cate","slug":"Cate","count":5,"path":"api/categories/Cate.json"}],"tags":[{"name":"测试","slug":"测试","count":3,"path":"api/tags/测试.json"}],"toc":"","author":{"name":"星辰星宇1314","slug":"blog-author","avatar":"http://qsy1225.github.io/photos/head.jpg","link":"http://github.com/qsy1225","description":"一名普通的大学生","socials":{"github":"https://github.com/qsy1225","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/img/bili.png","link":"https://space.bilibili.com/521368016？spm_id_from=333.1007.0.0"},"facebook":{"icon":"/svg/facebook.svg","link":"http://www.facebook.com/profile.php?id=100077070159946"}}}},"mapped":true,"hidden":false,"prev_post":{"title":"测试代码","uid":"e6cf42afdb1b98711d2c514c2756a0e1","slug":"ntest","date":"2024-03-11T11:02:45.000Z","updated":"2024-03-11T11:03:22.803Z","comments":true,"path":"api/articles/ntest.json","keywords":null,"cover":null,"text":" 登陆页面 登陆\\注册 账号： 密码： 登 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;录 function login(){ console....","permalink":"/post/ntest","photos":[],"count_time":{"symbolsCount":"2.4k","symbolsTime":"2 mins."},"categories":[{"name":"Cate","slug":"Cate","count":5,"path":"api/categories/Cate.json"}],"tags":[{"name":"测试","slug":"测试","count":3,"path":"api/tags/测试.json"}],"author":{"name":"星辰星宇1314","slug":"blog-author","avatar":"http://qsy1225.github.io/photos/head.jpg","link":"http://github.com/qsy1225","description":"一名普通的大学生","socials":{"github":"https://github.com/qsy1225","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/img/bili.png","link":"https://space.bilibili.com/521368016？spm_id_from=333.1007.0.0"},"facebook":{"icon":"/svg/facebook.svg","link":"http://www.facebook.com/profile.php?id=100077070159946"}}}},"feature":false},"next_post":{"title":"香蕉君","uid":"a15f48d9a10435dbb33df4b2286191af","slug":"t3pa","date":"2024-03-11T07:38:36.000Z","updated":"2024-03-11T08:17:07.811Z","comments":true,"path":"api/articles/t3pa.json","keywords":null,"cover":"https://lc-gluttony.s3.amazonaws.com/DEJfSszPd2BN/cPqE1byaKdTBtuByuM39OxmiPhnfc2WE/bananaa.png","text":"试试用html代码放视频 ","permalink":"/post/t3pa","photos":[],"count_time":{"symbolsCount":13,"symbolsTime":"1 mins."},"categories":[{"name":"资源","slug":"资源","count":1,"path":"api/categories/资源.json"}],"tags":[],"author":{"name":"星辰星宇1314","slug":"blog-author","avatar":"http://qsy1225.github.io/photos/head.jpg","link":"http://github.com/qsy1225","description":"一名普通的大学生","socials":{"github":"https://github.com/qsy1225","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/img/bili.png","link":"https://space.bilibili.com/521368016？spm_id_from=333.1007.0.0"},"facebook":{"icon":"/svg/facebook.svg","link":"http://www.facebook.com/profile.php?id=100077070159946"}}}},"feature":false}}